(define (domain emergency-services-logistics)
  (:requirements :strips :typing :negative-preconditions :fluents :hierachie)
  (:types
    robotic_agent
    location
    box
    content
    person
    carrier
    capacity
  )
  
    (:constants
        food - content
        tools - content
        medicine - content
        depot - location
        ;zero - capacity
    )

  (:predicates     
    (empty ?b - box)              
    (content_in_box ?c - content ?b - box)    ;il contenuto Ã¨ nella box 
    (content_needed ?p - person ?c - content) ;il bisogno di ogni singola persona 


    (at_robot_loc ?r - robotic_agent ?l - location)     
    (at_box_loc ?b - box ?l - location)      
    (at_content_loc ?c - content ?l - location)
    (at_person_loc ?c - person ?l - location)


    (attached_carrier ?r - robotic_agent ?ca - carrier)
    (empty_robot ?r - robotic_agent) ; il robot non ha carrier
    (holding ?r - robotic_agent ?b - box)
 
    ;carrier 
    (loaded ?ca - carrier ?b - box)
    (at_carrier_loc ?ca - carrier ?l - location)

    ;capacity
    (succ ?c0 - capacity ?c1 - capacity)
    (pred ?c0 - capacity ?c1 - capacity)
    ;(capacity_at ?cap - capacity)
    (num_box_on_carrier ?ca - carrier ?cap - capacity)
  )

  ;;;; TASKS
  
    (:task deliver_task
        :parameters (?l1 ?l2 - location ?b - box ?r - robotic_agent ?ca - carrier ?p - person ?c - content ?c0 ?c1 - capacity)
        :precondition ()
        :effect ()
    )
     
    (:task pickup_task
        :parameters (?r - robotic_agent ?b - box ?l - location) 
        :precondition ()
        :effect ()
    )

    (:task fill_task
        :parameters(?r - robotic_agent ?l - location ?b - box ?p - person ?c - content)
        :precondition ()
        :effect ()
    )
    
    (:task go_to_task
        :parameters (?r - robotic_agent ?l - location)
        :precondition () 
        :effect () 
    )
    (:task load_task
        :parameters (?r - robotic_agent ?ca - carrier ?l - location ?b - box ?c0 ?c1 - capacity) 
        :precondition ()
        :effect ()
    )
    (:task unload_task
        :parameters (?r - robotic_agent ?ca - carrier ?l - location ?b - box  ?c0 ?c1 - capacity) 
        :precondition ()
        :effect ()
    )

    ;;;;; METHODS
    
    (:method pickup_method
        :parameters (?l - location ?b - box ?r - robotic_agent) 
        :task (pickup_task ?r ?b ?l)
        :subtasks (and
                        (task0 (pickup ?r ?l ?b))
                  ) 
    )

    (:method fill_method
        :parameters(?r - robotic_agent ?l - location ?b - box ?p - person ?c - content) 
        :task (fill_task ?r ?l ?b ?p ?c)
        :subtasks (and
                        (task0 (fill ?r ?l ?b ?p ?c))
                  )
    )


    (:method load_method
        :parameters (?l - location ?b - box ?r - robotic_agent ?ca - carrier ?c0 ?c1 - capacity) 
        :task (load_task ?r ?ca ?l ?b ?c0 ?c1)
        :subtasks (and
                        (task0 (load_carrier ?r ?l ?ca ?b ?c0 ?c1))
                  )
    )
    
    
    
    (:method deliver_method
        :parameters (?l1 ?l2 - location ?b - box ?r - robotic_agent ?ca - carrier ?p - person ?c - content ?c0 ?c1 - capacity) 
        :task (deliver_task ?l1 ?l2 ?b ?r ?ca ?p ?c ?c0 ?c1)
        :subtasks (and
                     (task0 (pickup_task ?r ?b ?l1))
                     (task1 (fill_task ?r ?l1 ?b ?p ?c))
                     (task2 (load_task ?r ?ca ?l1 ?b ?c0 ?c1))
                     (task3 (go_to_task ?r ?l2))
                     (task4 (deliver ?r ?l2 ?b ?ca ?c ?p ?c1 ?c0))
                     (task5 (go_to_task ?r ?l1))
                  )
        :ordering (and (task0 < task1)
                       (task1 < task2)
                       (task2 < task3)
                       (task3 < task4)
                       (task4 < task5)
                  )
    )

    (:method move_to_method
        :parameters (?r - robotic_agent ?l1 ?l2 - location) 
        :task (go_to_task ?r ?l2)
        :subtasks (and
                    (task0 (move ?r ?l1 ?l2))
                  )
    )


    ;; attach carrier to robot, in our case. Like problem statement states
    ;; this instead of robotic agent could be airplane or other transportation vehicle
    (:action attach_carrier
        :parameters (?r - robotic_agent ?ca - carrier ?l - location )
        :precondition (and
            (at_robot_loc ?r ?l)
            (at_carrier_loc ?ca ?l)
            (empty_robot ?r)
            ;(not (attached_carrier ?r ?ca))
    )
        :effect (and
                (not (empty_robot ?r))
                (attached_carrier ?r ?ca)
    )
  )

  
  (:action load_carrier
    :parameters (?r - robotic_agent ?l - location ?ca - carrier ?b - box ?c0 ?c1 - capacity)
    :precondition (and
      (at_robot_loc ?r ?l)
      (at_carrier_loc ?ca ?l)
      (at_box_loc ?b ?l)
      (attached_carrier ?r ?ca)
      (not (empty ?b))
      (num_box_on_carrier ?ca ?c0)
      (succ ?c0 ?c1)
    )
    :effect (and
        (loaded ?ca ?b)
        (not (num_box_on_carrier ?ca ?c0))
        (num_box_on_carrier ?ca ?c1)
        ;(not (at_box_loc ?b ?l))
        
    )
  )


  (:action pickup
    :parameters(?r - robotic_agent ?l - location ?b - box)
    :precondition (and
        (at_box_loc ?b ?l)
        (at_robot_loc ?r ?l)
        (empty ?b)
        ;(not (holding ?r ?b))
    )
    :effect(and
    	(holding ?r ?b)
        )
    )


  (:action fill
    :parameters(?r - robotic_agent ?l - location ?b - box ?p - person ?c - content)
    :precondition (and 
        (at_content_loc ?c ?l)
        (at_box_loc ?b ?l)
        (at_robot_loc ?r ?l)
        (empty ?b)
        (holding ?r ?b)
        (content_needed ?p ?c)
    )
    :effect(and
    	(not (empty ?b))
        (content_in_box ?c ?b)
        )
  )
 
  (:action move
    :parameters (?r - robotic_agent ?from ?to - location)
    :precondition (and
      (at_robot_loc ?r ?from)
      (not (at_robot_loc ?r ?to))
    )
    :effect (and
      (at_robot_loc ?r ?to)
      (not (at_robot_loc ?r ?from))
      
    )
  )
  
  (:action deliver
    :parameters (?r - robotic_agent ?l - location ?b - box ?ca - carrier ?c - content ?p - person ?c0 ?c1 - capacity)
    :precondition (and
      (at_robot_loc ?r ?l)
      (at_person_loc ?p ?l)
      (loaded ?ca ?b)
      (not (empty ?b))
      (content_needed ?p ?c)
      (content_in_box ?c ?b)
      (pred ?c0 ?c1)
      (num_box_on_carrier ?ca ?c0)
    )
    :effect(and
        (empty ?b) 
        (not (at_box_loc ?b ?l))
        (not (loaded ?ca ?b))
        (not (content_needed ?p ?c))
        (not (num_box_on_carrier ?ca ?c0))
        (num_box_on_carrier ?ca ?c1)
    )
  )
)